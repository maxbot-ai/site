"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Dictionaries",o={unversionedId:"design-reference/dictionaries",id:"design-reference/dictionaries",title:"Dictionaries",description:"A dictionary (dict) is a collection of key: value pairs. Keys must be unique and always have exactly one value. Dictionaries are unordered, use dict|dictsort if you need an order.",source:"@site/docs/design-reference/dictionaries.md",sourceDirName:"design-reference",slug:"/design-reference/dictionaries",permalink:"/design-reference/dictionaries",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Lists",permalink:"/design-reference/lists"},next:{title:"Numbers",permalink:"/design-reference/numbers"}},s={},p=[{value:"Literals",id:"literals",level:2},{value:"<code>{key: value}</code>",id:"new-dict",level:3},{value:"Constructors",id:"constructors",level:2},{value:"<code>dict</code>",id:"dict",level:3},{value:"Operators",id:"operators",level:2},{value:"<code>key in dict</code>",id:"key-in-dict",level:3},{value:"<code>key not in dict</code>",id:"key-not-in-dict",level:3},{value:"<code>dict[key]</code>",id:"operator-dict-access",level:3},{value:"<code>dict.key</code>",id:"operator-attr-access",level:3},{value:"Tests",id:"tests",level:2},{value:"<code>x is mapping</code>",id:"test-mapping",level:3},{value:"Filters",id:"filters",level:2},{value:"<code>dict|dictsort</code>",id:"filter-dictsort",level:3},{value:"Parametes",id:"parametes",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>dict|items</code>",id:"filter-items",level:3},{value:"<code>dict|length</code>",id:"filter-length",level:3},{value:"<code>dict|list</code>",id:"filter-list",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>dict.clear()</code>",id:"method-clear",level:3},{value:"<code>dict.items()</code>",id:"method-items",level:3},{value:"<code>dict.keys()</code>",id:"method-keys",level:3},{value:"<code>dict.pop(key, ...)</code>",id:"method-pop",level:3},{value:"<code>dict.setdefault(key, ...)</code>",id:"method-setdefault",level:3},{value:"<code>dict.update(other)</code>",id:"method-update",level:3},{value:"<code>dict.values()</code>",id:"method-values",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dictionaries"},"Dictionaries"),(0,r.kt)("p",null,"A dictionary (",(0,r.kt)("strong",{parentName:"p"},"dict"),") is a collection of ",(0,r.kt)("inlineCode",{parentName:"p"},"key: value")," pairs. Keys must be unique and always have exactly one value. Dictionaries are unordered, use ",(0,r.kt)("a",{parentName:"p",href:"#filter-dictsort"},(0,r.kt)("inlineCode",{parentName:"a"},"dict|dictsort"))," if you need an order."),(0,r.kt)("p",null,"It is convenient to use dictionaries in templates to implement simple business logic."),(0,r.kt)("h2",{id:"literals"},"Literals"),(0,r.kt)("h3",{id:"new-dict"},(0,r.kt)("inlineCode",{parentName:"h3"},"{key: value}")),(0,r.kt)("p",null,"A new dictionary can be written as a comma-separated list of ",(0,r.kt)("inlineCode",{parentName:"p"},"key: value")," pairs within braces."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#literals"},"Jinja Docs"),"."),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"dict"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict")),(0,r.kt)("p",null,"An alternative way to create a dict."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = dict(first_name="John", last_name="Snow") %}\n\n{{ user }}\n-> {"first_name": "John", "last_name": "Snow"}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-globals.dict"},"Jinja Docs"),"."),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("h3",{id:"key-in-dict"},(0,r.kt)("inlineCode",{parentName:"h3"},"key in dict")),(0,r.kt)("p",null,"Return true if the ",(0,r.kt)("em",{parentName:"p"},"key")," is contained in the ",(0,r.kt)("em",{parentName:"p"},"dict"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ "first_name" in user }}\n-> true\n')),(0,r.kt)("p",null,"Returns true because the user object contains the property first_name."),(0,r.kt)("h3",{id:"key-not-in-dict"},(0,r.kt)("inlineCode",{parentName:"h3"},"key not in dict")),(0,r.kt)("p",null,"Return true if the ",(0,r.kt)("em",{parentName:"p"},"key")," is ",(0,r.kt)("strong",{parentName:"p"},"not")," contained in the ",(0,r.kt)("em",{parentName:"p"},"dict"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ "middle_name" not in user }}\n-> true\n')),(0,r.kt)("h3",{id:"operator-dict-access"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict[key]")),(0,r.kt)("p",null,"Return the item of ",(0,r.kt)("em",{parentName:"p"},"dict")," with key ",(0,r.kt)("em",{parentName:"p"},"key"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user["first_name"] }}\n-> John\n')),(0,r.kt)("h3",{id:"operator-attr-access"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.key")),(0,r.kt)("p",null,"A convenient alternative to ",(0,r.kt)("a",{parentName:"p",href:"#operator-dict-access"},(0,r.kt)("inlineCode",{parentName:"a"},"dict[key]")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user.first_name }}\n-> John\n')),(0,r.kt)("h2",{id:"tests"},"Tests"),(0,r.kt)("h3",{id:"test-mapping"},(0,r.kt)("inlineCode",{parentName:"h3"},"x is mapping")),(0,r.kt)("p",null,"Return true if the ",(0,r.kt)("em",{parentName:"p"},"x")," is a mapping (dict etc.)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{% if x is mapping %}\n    X got values: {{ x.values()|list }}\n{% endif %}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.mapping"},"Jinja Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-values"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.values()")),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,r.kt)("h2",{id:"filters"},"Filters"),(0,r.kt)("h3",{id:"filter-dictsort"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict|dictsort")),(0,r.kt)("p",null,"Sort a dict and return an iterable of ",(0,r.kt)("inlineCode",{parentName:"p"},"(key, value)")," pairs. Python dicts may not be in the order you want to display them in, so sort them first.  This filter is a ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#generators"},"generator"),"."),(0,r.kt)("h4",{id:"parametes"},"Parametes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"case_sensitive")," - When sorting strings, sort upper and lower case separately."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"by")," - Sort by ",(0,r.kt)("em",{parentName:"li"},'"key"')," or ",(0,r.kt)("em",{parentName:"li"},'"value"')," (default=",(0,r.kt)("em",{parentName:"li"},'"key"'),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reverse")," - Sort descending instead of ascending.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"city_population")," variable contains a dictionary in which the key is the name of the city, and the value is its population."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set city_population = {\n   "Tokyo": 9273000,\n   "Rome": 2868104,\n   "Beijing": 20693000,\n   "Paris": 2241346\n} %}\n')),(0,r.kt)("p",null,"Sort by city name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{% for city, population in city_population|dictsort %}\n    {{ city }} has a population of {{ population }}.\n{% endfor %}\n->\nBeijing has a population of 20693000.\nParis has a population of 2241346.\nRome has a population of 2868104.\nTokyo has a population of 9273000.\n")),(0,r.kt)("p",null,"Sort by city population:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% for city, population in city_population|dictsort(by="value") %}\n    {{ city }} has a population of {{ population }}.\n{% endfor %}\n->\nParis has a population of 2241346.\nRome has a population of 2868104.\nTokyo has a population of 9273000.\nBeijing has a population of 20693000.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.dictsort"},"Jinja Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-sort"},(0,r.kt)("inlineCode",{parentName:"a"},"list|sort")),"."),(0,r.kt)("h3",{id:"filter-items"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict|items")),(0,r.kt)("p",null,"Return an iterable over the ",(0,r.kt)("inlineCode",{parentName:"p"},"(key, value)")," items of a dict. This filter is a ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#generators"},"generator"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dict|items")," is the same as ",(0,r.kt)("a",{parentName:"p",href:"#method-items"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.items()")),", except if dict is ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," an empty iterator is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user|items|list }}\n-> [("first_name", "John"), ("last_name", "Snow")]\n')),(0,r.kt)("p",null,"It is possible to iterate over dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"User Info:\n{% for key, value in user|items %}\n    {{ key }}: {{ value }}\n{% endfor %}\n->\nUser Info:\n    first_name: John\n    last_name: Snow\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.items"},"Jinja Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"Sequences and Iterables"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-items"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.items()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-values"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.values()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-keys"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.keys()")),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,r.kt)("h3",{id:"filter-length"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict|length")),(0,r.kt)("p",null,"Return the number of items in the dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user|length }}\n-> 2\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.length"},"Jinja Docs"),"."),(0,r.kt)("h3",{id:"filter-list"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict|list")),(0,r.kt)("p",null,"Return a list of all the keys used in the dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user|list }}\n-> ["first_name", "last_name"]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.list"},"Jinja Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-keys"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.keys()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-values"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.values()")),"."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"method-clear"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.clear()")),(0,r.kt)("p",null,"Remove all items from the dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{% do user.clear() %}\n')),(0,r.kt)("p",null,"If you subsequently reference the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," variable, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," only."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{{ user }}\n-> {}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.clear"},"Python Docs"),"."),(0,r.kt)("h3",{id:"method-items"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.items()")),(0,r.kt)("p",null,"Return an ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"iterable")," of the dictionary\u2019s items (",(0,r.kt)("inlineCode",{parentName:"p"},"(key, value)")," pairs). You may want to explicitly convert it to a list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user.items()|list }}\n-> [("first_name", "John"), ("last_name", "Snow")]\n')),(0,r.kt)("p",null,"It is possible to iterate over dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"User Info:\n{% for key, value in user.items() %}\n    {{ key }}: {{ value }}\n{% endfor %}\n->\nUser Info:\n    first_name: John\n    last_name: Snow\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.items"},"Python Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"Sequences and Iterables"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-values"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.values()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-keys"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.keys()")),", ",(0,r.kt)("a",{parentName:"p",href:"#filter-items"},(0,r.kt)("inlineCode",{parentName:"a"},"dict|items")),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,r.kt)("h3",{id:"method-keys"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.keys()")),(0,r.kt)("p",null,"Return an ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"iterable")," of the dictionary\u2019s keys. You may want to explicitly convert it to a list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user.keys()|list }}\n-> ["first_name", "last_name"]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.keys"},"Python Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"Sequences and Iterables"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-values"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.values()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-items"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.items()")),", ",(0,r.kt)("a",{parentName:"p",href:"#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"dict|list")),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,r.kt)("h3",{id:"method-pop"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.pop(key, ...)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dict.pop(key[, default])")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"key")," is in the dictionary, remove it and return its value, else return ",(0,r.kt)("em",{parentName:"p"},"default"),". If ",(0,r.kt)("em",{parentName:"p"},"default")," is not given and ",(0,r.kt)("em",{parentName:"p"},"key")," is not in the dictionary, an error is raised."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{% do user.pop("last_name") %}\n')),(0,r.kt)("p",null,"If you subsequently reference the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," variable, it returns only"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{{ user }}\n-> {"first_name": "John"}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.pop"},"Python Docs"),"."),(0,r.kt)("h3",{id:"method-setdefault"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.setdefault(key, ...)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dict.setdefault(key[, default])")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"key")," is in the dictionary, return its value. If not, insert ",(0,r.kt)("em",{parentName:"p"},"key")," with a value of ",(0,r.kt)("em",{parentName:"p"},"default")," and return ",(0,r.kt)("em",{parentName:"p"},"default"),". ",(0,r.kt)("em",{parentName:"p"},"default")," defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set pizza_order = {} %}\n\n{% do pizza_order.setdefault(\'toppings\', []).append("onion") %}\n{{ pizza_order }}\n-> {"toppings": ["onion"]}\n')),(0,r.kt)("p",null,"todo: need more clear and useful example."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.setdefault"},"Python Docs"),"."),(0,r.kt)("h3",{id:"method-update"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.update(other)")),(0,r.kt)("p",null,"Update the dictionary with the key/value pairs from other, overwriting existing keys. Return ",(0,r.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set car = {"brand": "Ford", "model": "Mustang"} %}\n{% set color_info = {"color": "White"} %}\n\n{% do car.update(color_info) %}\n')),(0,r.kt)("p",null,"A convenient alternative is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% do car.update(color="White") %}\n')),(0,r.kt)("p",null,"The updated dict will look like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{{ car }}\n-> {"brand": "Ford", "model": "Mustang", "color": "White"}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.update"},"Python Docs"),"."),(0,r.kt)("h3",{id:"method-values"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict.values()")),(0,r.kt)("p",null,"Return an ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"iterable")," of the dictionary\u2019s values. You may want to explicitly convert it to a list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% set user = {"first_name": "John", "last_name": "Snow"} %}\n\n{{ user.values()|list }}\n-> ["John", "Snow"]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also"),": ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#dict.keys"},"Python Docs"),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#sequences-and-iterables"},"Sequences and Iterables"),", ",(0,r.kt)("a",{parentName:"p",href:"#method-keys"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.keys()")),", ",(0,r.kt)("a",{parentName:"p",href:"#method-items"},(0,r.kt)("inlineCode",{parentName:"a"},"dict.items()")),", ",(0,r.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,r.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."))}c.isMDXComponent=!0}}]);