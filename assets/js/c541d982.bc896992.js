"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[853],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=o.createContext({}),p=function(e){var t=o.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(r.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,c=u["".concat(r,".").concat(m)]||u[m]||h[m]||i;return n?o.createElement(c,l(l({ref:t},d),{},{components:n})):o.createElement(c,l({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={},l="Slot Filling",s={unversionedId:"design-guides/slot-filling",id:"design-guides/slot-filling",title:"Slot Filling",description:"Add slot filling to a dialog node to gather additional information from a user within that node. Slots allow information to be collected at the user's pace. When the node condition is met, details that a user provides immediately are saved in slots. The bot then asks for the missing details and stores them in the slots as well. The node response will be processed only when the bot fills all the required slots.",source:"@site/docs/design-guides/slot-filling.md",sourceDirName:"design-guides",slug:"/design-guides/slot-filling",permalink:"/design-guides/slot-filling",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Dialog Tree",permalink:"/design-guides/dialog-tree"},next:{title:"Digressions",permalink:"/design-guides/digressions"}},r={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Ask follow up questions",id:"ask-follow-up-questions",level:3},{value:"Collect multiple pieces of information",id:"collect-multiple-pieces-of-information",level:3},{value:"Optional Slots",id:"optional-slots",level:3},{value:"Capturing Slot Values",id:"capturing-slot-values",level:2},{value:"Capturing user input",id:"capturing-user-input",level:3},{value:"Capturing multiple values",id:"capturing-multiple-values",level:3},{value:"Processing Slots",id:"found",level:2},{value:"Acknowlege user input",id:"acknowlege-user-input",level:3},{value:"Validate user input",id:"validate-user-input",level:3},{value:"Display error messages",id:"display-error-messages",level:3},{value:"Skip to node-level response",id:"skip-to-node-level-response",level:3},{value:"Access the previous slot value",id:"access-the-previous-slot-value",level:3},{value:"Getting confirmation",id:"getting-confirmation",level:3},{value:"Handling Misunderstood",id:"not-found",level:2},{value:"Clarify your expectations",id:"clarify-your-expectations",level:3},{value:"Multiple failed attempts",id:"multiple-failed-attempts",level:3},{value:"Keep Users on Track",id:"slot-handlers",level:2},{value:"Answering off-topic questions",id:"answering-off-topic-questions",level:3},{value:"Exit a process",id:"exit-a-process",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Conditional Slots",id:"conditional-slots",level:3},{value:"Lifespan of slot variables",id:"lifespan-of-slot-variables",level:3},{value:"Avoiding slot filling confusion",id:"avoiding-slot-filling-confusion",level:3},{value:"The same entity is used in more than one slot",id:"the-same-entity-is-used-in-more-than-one-slot",level:4},{value:"A term fully or partially matches the entities in more than one slot",id:"a-term-fully-or-partially-matches-the-entities-in-more-than-one-slot",level:4},{value:"A term is recognized as more than one builtin entity type",id:"a-term-is-recognized-as-more-than-one-builtin-entity-type",level:4},{value:"Slot filling flow",id:"flow",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"slot-filling"},"Slot Filling"),(0,a.kt)("p",null,"Add slot filling to a dialog node to gather additional information from a user within that node. Slots allow information to be collected at the user's pace. When the node condition is met, details that a user provides immediately are saved in slots. The bot then asks for the missing details and stores them in the slots as well. The node response will be processed only when the bot fills all the required slots."),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("h3",{id:"ask-follow-up-questions"},"Ask follow up questions"),(0,a.kt)("p",null,"Use slots to get the information you need before you can respond accurately to the user. For example, if users ask about operating hours, but the hours differ by store location, you could ask a follow up question about which store location they plan to visit before you answer. You can then add response conditions that take the provided location information into account."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- condition: intents.operating_hours\n  slot_filling:\n    - name: location\n      check_for: entities.location\n      prompt: >-\n          Are you visiting our store downtown or the one in the mall?\n  response: !jinja/yaml |-\n      {% if slots.location == 'downtown' %}\n        - text: We are open from 8AM to 8PM seven days a week.\n      {% else %}\n        - text: >-\n              Our retail store in the mall follows the mall\n              operating hours of 9AM to 9 PM.\n      {% endif %}\n")),(0,a.kt)("p",null,"For each slot we specify following fields."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - a name for the slot variable in which to store the value of interest from the user input, in the example the variable  is ",(0,a.kt)("inlineCode",{parentName:"li"},"slots.location"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check_for")," - an expression that checks if the user input contains the value of interest, if so, the value is stored in the variable."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prompt")," - a response that asks a piece of the information you need from the user.")),(0,a.kt)("p",null,"The conversation could go like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\uddd1 When do you open?\n\ud83e\udd16 Are you visiting our store downtown or the one in the mall?\n\ud83e\uddd1 I prefer downtown.\n\ud83e\udd16 We are open from 8AM to 8PM seven days a week.\n")),(0,a.kt)("p",null,"When the node condition is met and ",(0,a.kt)("inlineCode",{parentName:"p"},"slots.location")," is empty, the bot asks a follow up question using the ",(0,a.kt)("inlineCode",{parentName:"p"},"prompt")," response. After displaying this prompt the bot waits for the user to respond. The bot then captures the ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.location")," from the user input and stores the value in the ",(0,a.kt)("inlineCode",{parentName:"p"},"slots.location")," variable."),(0,a.kt)("p",null,"The response template uses the value in the ",(0,a.kt)("inlineCode",{parentName:"p"},"slots.location")," variable to chose the correct operating hours."),(0,a.kt)("h3",{id:"collect-multiple-pieces-of-information"},"Collect multiple pieces of information"),(0,a.kt)("p",null,"Slots can help you to collect multiple pieces of information that you need to complete a complex task for a user, such as making a dinner reservation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- condition: intents.reservation\n  label: reservation\n  slot_filling:\n    - name: date\n      check_for: entities.date\n      prompt: What day would you like to come in?\n    - name: time\n      check_for: entities.time\n      prompt: What time do you want the reservation to be made for?\n    - name: guests\n      check_for: entities.number\n      prompt: How many people will be dining?\n  response: !jinja >-\n      OK. I am making you a reservation for {{ slots.guests }}\n      on {{ slots.date }} at {{ slots.time }}.\n\n")),(0,a.kt)("p",null,'The user might provide values for mutliple slots at once. For example, the input might include the information, "Can 6 of us get a table for dinner at 7pm?". This one input contains two of the missing required values: the number of guests and time of the reservation. Your assistant recognizes and stores both of them, each one in its corresponding slot. It then displays the prompt that is associated with the next empty slot.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\uddd1 Can 6 of us get a table for dinner at 7pm?\n\ud83e\udd16 What day would you like to come in?\n\ud83e\uddd1 tomorrow\n\ud83e\udd16 OK. I am making you a reservation for 6 on 2022-05-29 at 19:00:00.\n")),(0,a.kt)("p",null,"The node-level response is not executed until after all of the required slots are filled. Typically, the response summarizes the information you collected."),(0,a.kt)("h3",{id:"optional-slots"},"Optional Slots"),(0,a.kt)("p",null,"Add a slot without a ",(0,a.kt)("inlineCode",{parentName:"p"},"prompt")," to make a slot optional. The bot does not ask the user for the information, but it does look for the information in the user input, and saves the value if the user provides it."),(0,a.kt)("p",null,"For example, you might add a slot that captures dietary restriction informations in case the user specifies any. However, you don't want to ask all users for dietary information since it is irrelevant in most cases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- condition: intents.order_pizza\n  label: order_pizza\n  slot_filling:\n    - name: size\n      check_for: entities.size\n      prompt: What size pizza would you like?\n    - name: time\n      check_for: entities.time\n      prompt: When do you need the pizza by?\n    - name: dietary\n      check_for: entities.dietary\n  response: !jinja/yaml |-\n    {% if slots.dietary %}\n      - text: >-\n            I am ordering a {{ slots.size }} {{ slots.dietary }}\n            pizza for delivery at {{ slots.time }}.\n    {% else %}\n      - text: >-\n            I am ordering a {{ slots.size }}\n            pizza for delivery at {{ slots.time }}.\n    {% endif %}\n")),(0,a.kt)("p",null,"If you make a slot optional, only reference its slot variable in the node-level response text if you can word it such that it makes sense even if no value is provided for the slot. The resulting text makes sense whether the dietary restriction information, such as gluten-free or dairy-free, is provided"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\uddd1 Can I get a small pizza, gluten-free please\n\ud83e\udd16 When do you need the pizza by?\n\ud83e\uddd1 3:00PM\n\ud83e\udd16 I am ordering a small gluten-free pizza for delivery at 15:00:00.\n")),(0,a.kt)("p",null,"or not provided"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\uddd1 I want to order a large pizza at 7pm\n\ud83e\udd16 I am ordering a large pizza for delivery at 19:00:00.\n")),(0,a.kt)("h2",{id:"capturing-slot-values"},"Capturing Slot Values"),(0,a.kt)("p",null,"During the slot filling, when a user input is received, the ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," expressions are evaluated for all slots and captured values are saved in slot variables."),(0,a.kt)("p",null,"In most cases, you check for entity values as in the basic examples above. You can also check for a specific entity attribute, an intent or a message."),(0,a.kt)("p",null,"Avoid checking for any state variable values. Because the value you check for is also the value that is saved, using a state variable can lead to unexpected behavior. Instead, consider using ",(0,a.kt)("a",{parentName:"p",href:"#conditional-slots"},"conditional slots"),"."),(0,a.kt)("h3",{id:"capturing-user-input"},"Capturing user input"),(0,a.kt)("p",null,"Special variable ",(0,a.kt)("inlineCode",{parentName:"p"},"slot_in_focus")," forces the ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," condition to be applied only when the current slot has just been prompted. The ",(0,a.kt)("inlineCode",{parentName:"p"},"slot_in_focus")," variable always evaluates to a boolean (true or false) value."),(0,a.kt)("p",null,"You might want to prompt a user to supply free form text in a dialog node with slots that you can save and refer to later. Using ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for: message.text")," is useless because it causes the slot to fill up whenever the user types a text at other times during the dialog. Do it this way instead."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: summary\n  check_for: slot_in_focus and message.text\n  prompt: Can you summarize the problem?\n")),(0,a.kt)("p",null,"Note that the boolean operators ",(0,a.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"or")," can return not only boolean type, but right or left values."),(0,a.kt)("p",null,"In the example above, the ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," expression first evaluates ",(0,a.kt)("inlineCode",{parentName:"p"},"slot_in_focus"),"; if ",(0,a.kt)("inlineCode",{parentName:"p"},"slot_in_focus")," is false, its value is returned; otherwise, the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"message.text")," is returned (which is not a boolean, but a string)."),(0,a.kt)("p",null,"The order of operands is important. If you swap the operands in the example: ",(0,a.kt)("inlineCode",{parentName:"p"},"message.text and slot_in_focus"),", you will never get ",(0,a.kt)("inlineCode",{parentName:"p"},"message.text")," when it is not empty."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/expressions.html#boolean-operations"},"Python Boolean Operators")," for more information."),(0,a.kt)("h3",{id:"capturing-multiple-values"},"Capturing multiple values"),(0,a.kt)("p",null,"You can ask for a list of items and save them in one slot."),(0,a.kt)("p",null,"For example, you might want to ask users whether they want toppings on their pizza. To do so define an ",(0,a.kt)("inlineCode",{parentName:"p"},"entity.toppings"),", and the accepted values for it (pepperoni, cheese, mushroom, and so on). Add a slot that asks the user about toppings. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"all_values")," attribute of the entity to capture multiple values, if provided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: toppings\n  check_for: entities.toppings.all_values\n  prompt: Any toppings on that?\n")),(0,a.kt)("p",null,"Later, in the response, use ",(0,a.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.join"},"join")," filter to list each item in the toppings array and separate the values with a comma. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"response: !jinja >-\n    I am ordering you a {{ slots.size }} pizza with\n    {{ slots.toppings|join(',') }} for delivery by {{ slots.time }}.\n")),(0,a.kt)("h2",{id:"found"},"Processing Slots"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response to acknowledge user input, add validation or other processing to filled slots. The ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response is displayed after the user provides the expected information that matches the ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," field. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response, you can define further behavior of the bot using the following control commands."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"move_on")," (default) - move on to the next empty slot;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prompt_again")," - repeat the slot prompt again and wait for the user to respond;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"listen_again")," - skip prompt for the slot and just wait for the user to respond;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"response")," - skip the remaining slots and go directly to the node-level response next.")),(0,a.kt)("h3",{id:"acknowlege-user-input"},"Acknowlege user input"),(0,a.kt)("p",null,"It is good practice to send a response for each filled slot to assure the user that their input is understood. This example shows slots that helps users place a pizza order by collecting two pieces of information, the pizza size and delivery time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: size\n  check_for: entities.size\n  prompt: What size pizza would you like?\n  found: !jinja "{{ slots.size }} it is."\n- name: time\n  check_for: entities.time\n  prompt: When do you need the pizza by?\n  found: !jinja For delivery by {{ slots.time }}.\n')),(0,a.kt)("p",null,"After displaying the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response, the bot moves on to the next empty slot. This is how the default ",(0,a.kt)("inlineCode",{parentName:"p"},"move_on")," command works. We don't specify it explicitly. The dialog could go like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 What size pizza would you like?\n\ud83e\uddd1 medium\n\ud83e\udd16 medium it is.\n\ud83e\udd16 When do you need the pizza by?\n\ud83e\uddd1 at 5 pm\n\ud83e\udd16 For delivery by 17:00:00.\n")),(0,a.kt)("h3",{id:"validate-user-input"},"Validate user input"),(0,a.kt)("p",null,"If you are using an entity in the ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," field that could pick up the wrong value, add conditions that catch any likely misinterpretations, and use ",(0,a.kt)("inlineCode",{parentName:"p"},"prompt_again")," command to clear the current slot value and prompt for the correct value."),(0,a.kt)("p",null,"For example, a slot is expecting the ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.time")," for a dinner reservation. To prevent an invalid time from being saved, you can add a conditional response that checks whether the time provided is before the restaurant's last seating time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: time\n  check_for: entities.time\n  prompt: What time do you want the reservation to be made for?\n  found: !jinja/yaml |-\n    {% if slots.time|time > '21:00:00'|time %}\n      - text: Our last seating is at 9PM.\n      - prompt_again: {}\n    {% endif %}\n")),(0,a.kt)("p",null,"The corresponding dialog might be something like,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 What time do you want the reservation to be made for?\n\ud83e\uddd1 10PM please\n\ud83e\udd16 Our last seating is at 9PM.\n\ud83e\udd16 What time do you want the reservation to be made for?\n")),(0,a.kt)("h3",{id:"display-error-messages"},"Display error messages"),(0,a.kt)("p",null,"You might word the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response such that it overlaps with the ",(0,a.kt)("inlineCode",{parentName:"p"},"prompt")," response. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"listen_again")," command to skip the prompt for the slot and simply wait for the user to respond. Perhaps, this modification of the dinner reservation example will look more natural, because the bot repeats the question to the user in a different wording."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: time\n  check_for: entities.time\n  prompt: What time do you want the reservation to be made for?\n  found: !jinja/yaml |-\n    {% if slots.time|time > '21:00:00'|time %}\n      - text: |-\n            The restaurant seats people between 9AM and 9PM.\n            Please specify the time that you want to eat.\n      - listen_again: {}\n    {% endif %}\n")),(0,a.kt)("p",null,"Compare the following dialog with the previouse one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 What time do you want the reservation to be made for?\n\ud83e\uddd1 10PM please\n\ud83e\udd16 The restaurant seats people between 9AM and 9PM.\n   Please specify the time that you want to eat.\n")),(0,a.kt)("h3",{id:"skip-to-node-level-response"},"Skip to node-level response"),(0,a.kt)("p",null,"If you no longer need to fill any of the remaining slots, use ",(0,a.kt)("inlineCode",{parentName:"p"},"response")," command to skip the remaining slots and go directly to the node-level response next. For example, you could add a condition that checks whether the user's age is under 18. If so, you might skip the remaining slots which ask questions about the user's driving record."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"#...\nslot_filling:\n  - name: age\n    check_for: entities.number\n    prompt: How old are you?\n    found: !jinja/yaml |-\n      {% if slots.age < 18 %}\n        - text: Sorry we don't rent cars to teenagers.\n        - response: {}\n      {% endif %}\n  - name: driving_record\n    check_for: entities.driving_record\n    prompt: What is your driving record?\n  #...\nresponse:\n  {% if slots.age and slots.driving_record ... %}\n      ...\n  {% else %}\n    - text: Booking cancelled.\n  {% endif %}\n")),(0,a.kt)("p",null,"In the node-level response, the bot checks for all slot variables. If the all of them is filled, then it reports success. If not, it just shows a cancel message."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 How old are you?\n\ud83e\uddd1 i am 16\n\ud83e\udd16 Sorry we don't rent cars to teenagers.\n\ud83e\udd16 Booking cancelled.\n")),(0,a.kt)("h3",{id:"access-the-previous-slot-value"},"Access the previous slot value"),(0,a.kt)("p",null,"If, durring the slot filling, the user provides a new value for a slot, then the new value is saved in the slot variable, replacing the previously-specified value. Your dialog can acknowledge explicitly that this replacement has occurred by using special properties that are defined for the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"previous_value")," - previous value of this slot variable;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"current_value")," - current value of this slot variable.")),(0,a.kt)("p",null,"For example, your bot asks for a destination city for a flight reservation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: destination\n  check_for: entities.city\n  prompt: Enter your destination city.\n  found: !jinja |-\n      {% if previous_value and previous_value != current_value %}\n        - text: >-\n              Ok, updating destination from {{ previous_value }}\n              to {{ current_value }}.\n      {% else %}\n        - text: >-\n              Okay, flight to {{ slots.destination }}.\n      {% endif %}\n")),(0,a.kt)("p",null,"If you set up the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response as above, then your bot can handle this type of change gracefully."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 Enter your destination city.\n\ud83e\uddd1 fly to Paris\n\ud83e\udd16 Okay, flight to Paris.\n...\n\ud83e\uddd1 Oh wait. I want to fly to Madrid instead\n\ud83e\udd16 Ok, updating destination from Paris to Madrid.\n")),(0,a.kt)("h3",{id:"getting-confirmation"},"Getting confirmation"),(0,a.kt)("p",null,"Add a slot after the others that asks the user to confirm that the information you have collected is accurate and complete. The slot can look for responses that match the ",(0,a.kt)("inlineCode",{parentName:"p"},"intents.yes")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"intents.no"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: confirmation\n  check_for: slot_in_focus and (intents.yes or intents.no)\n  prompt: !jinja >-\n      I'm going to order you a {{ slots.size }} pizza\n      for delivery at {{ slots.time }}.\n\n      Should I go ahead?\n")),(0,a.kt)("p",null,'Because users might include affirmative or negative statements at other times during the dialog ("Oh yes, we want the pizza delivered at 5pm") or ("no guests tonight, let\'s make it a small"), use the ',(0,a.kt)("inlineCode",{parentName:"p"},"slot_in_focus")," property to make it clear in the slot condition that you are looking for a Yes or No response to the prompt for this slot only."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"found")," response, add a condition that checks for ",(0,a.kt)("inlineCode",{parentName:"p"},"intents.no")," response. When found, reset the slot variables that you saved earlier and ask for the information all over again."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"  found: !jinja/yaml |-\n      {% if intents.no %}\n        {% slot size = none %}\n        {% slot time = none %}\n        {% slot confirmation = none %}\n        - text: Let's try this again.\n      {% endif %}\n")),(0,a.kt)("p",null,"In the end you see the bot prompts slots again, becase they have been were reset."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 I'm going to order you a small pizza for delivery at 17:00:00.\n   Should I go ahead?\n\ud83e\uddd1 No I changed my mind\n\ud83e\udd16 Let's try this again.\n\ud83e\udd16 What size pizza would you like?\n")),(0,a.kt)("h2",{id:"not-found"},"Handling Misunderstood"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," response is displayed only if the information provided by the user is not understood by the bot, which means all of the following are true:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"none of the slots in the node are filled successfully;"),(0,a.kt)("li",{parentName:"ul"},"no ",(0,a.kt)("a",{parentName:"li",href:"#slot-handlers"},"slot handlers")," are understood;"),(0,a.kt)("li",{parentName:"ul"},"no root nodes are triggered as a ",(0,a.kt)("a",{parentName:"li",href:"/design-guides/digressions"},"digression")," from slot filling.")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"#flow"},"Slot Filling Flow")," for more details."),(0,a.kt)("p",null,"In the simplest case, the text you specify in ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," response can more explicitly state the type of information you need the user to provide. After displaying the text to the user, the further behavior of the bot can be defined using the following control commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prompt_again")," (default) - repeat the slot prompt again and wait for the user to respond;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"listen_again")," - skip prompt for the slot and just wait for the user to respond;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"response")," - skip the remaining slots and go directly to the node-level response next.")),(0,a.kt)("h3",{id:"clarify-your-expectations"},"Clarify your expectations"),(0,a.kt)("p",null,"Back to ",(0,a.kt)("a",{parentName:"p",href:"#getting-confirmation"},"Getting confirmation")," example. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," response to clarify that you are expecting the user to provide a Yes or No answer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"  not_found: >-\n      Respond with Yes to indicate that you want the order to\n      be placed as-is, or No to indicate that you do not.\n")),(0,a.kt)("p",null,"The dialog will be like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 I'm going to order you a small pizza for delivery at 17:00:00.\n   Should I go ahead?\n\ud83e\uddd1 What should I do?\n\ud83e\udd16 Respond with Yes to indicate that you want the order to be placed as-is, or No to indicate that you do not.\n\ud83e\udd16 I'm going to order you a small pizza for delivery at 17:00:00.\n   Should I go ahead?\n")),(0,a.kt)("h3",{id:"multiple-failed-attempts"},"Multiple failed attempts"),(0,a.kt)("p",null,"You can provide users with a way to skip a slot if they cannot answer it correctly after several attempts by using ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," response."),(0,a.kt)("p",null,"In this example, the bot asks for the pizza size. It lets the user answer the question incorrectly 3 times before applying a size (medium) to the variable for the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: size\n  check_for: entities.size\n  prompt: What size did you want?\n  not_found: !jinja/yaml |-\n      {% set counter = slots.counter|default(0) %}\n      {% if counter > 1 %}\n        {% slot size = "medium" %}\n        - text: We will bring you a medium size pizza.\n      {% else %}\n        {% slot counter = counter + 1 %}\n        - text: >-\n              What size did you want?\n              We have small, medium, and large.\n        - listen_again: {}\n      {% endif %}\n')),(0,a.kt)("p",null,"Use a ",(0,a.kt)("inlineCode",{parentName:"p"},"slots.counter")," variable to keep track of the number of times the ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," response is returned. The ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),' filter sets the initial counter variable value to 0. Note that you have to manually set "medium" value for ',(0,a.kt)("inlineCode",{parentName:"p"},"slots.size")," to prevent the bot from prompting for it."),(0,a.kt)("p",null,"Dialog could be like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\udd16 What size did you want?\n\ud83e\uddd1 plus size\n\ud83e\udd16 What size did you want? We have small, medium, and large.\n\ud83e\uddd1 then it's all the same to me\n\ud83e\udd16 What size did you want? We have small, medium, and large.\n\ud83e\uddd1 choose yourself\n\ud83e\udd16 We will bring you a medium size pizza.\n...\n")),(0,a.kt)("h2",{id:"slot-handlers"},"Keep Users on Track"),(0,a.kt)("p",null,"You can optionally define slot handlers that provide responses to questions users might ask during the interaction that are tangential to the purpose of the node. After answering the question, the further behavior of the bot can be defined using the following control commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"move_on")," (default) - move on and display prompt for the next empty slot;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"response")," -  skip the remaining slots and go directly to the node-level response next.x")),(0,a.kt)("h3",{id:"answering-off-topic-questions"},"Answering off-topic questions"),(0,a.kt)("p",null,"For example, the user might ask about the tomato sauce recipe or where you get your ingredients. To handle such off-topic questions, add a slot handler with a condition and response for each anticipated question."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"slot_filling:\n  - name: size\n    check_for: entities.size\n    prompt: What size did you want?\n  #...\nslot_handlers:\n  - condition: intents.sauce_recipe\n    response: >-\n        It is a secret family recipe passed\n        down from generation to generation.\n        And I will take it to my grave.\n")),(0,a.kt)("p",null,"This condition is triggered if the user provides input that matches the slot handler conditions at any time during the dialog node flow up until the node-level response is displayed."),(0,a.kt)("p",null,"After responding to the off-topic question, the prompt associated with the current empty slot is displayed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83e\uddd1 I want to order pizza.\n\ud83e\udd16 What size did you want?\n\ud83e\uddd1 What kind of sauce do you have there?\n\ud83e\udd16 It is a secret family recipe passed down from generation to generation. And I will take it to my grave.\n\ud83e\udd16 What size did you want?\n")),(0,a.kt)("p",null,"Be careful about adding conditions that always evaluate to true (such as the special condition, ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),") as slot handlers. If the slot handler evaluates to true, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"not_found")," condition and ",(0,a.kt)("a",{parentName:"p",href:"/design-guides/digressions"},"digression")," are skipped entirely."),(0,a.kt)("h3",{id:"exit-a-process"},"Exit a process"),(0,a.kt)("p",null,"Add at least one slot handler that can recognize it when a user wants to exit the node."),(0,a.kt)("p",null,"For example, in a node that collects information to schedule a pet grooming appointment, you can add a handler that conditions on the ",(0,a.kt)("inlineCode",{parentName:"p"},"intents.cancel"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"slot_handlers:\n  - condition: intents.cancel\n    response:\n      - text: Ok, we'll stop there. No appointment will be scheduled.\n      - response: {}\nresponse:\n    {% if slots.animal and slots.time and slots.date  %}\n      - text: >-\n            I am making a grooming appointment for your\n            {{ slots.animal }} at {{ slots.time }} on {{ slots.date }}.\n    {% else %}\n      - text: >-\n            If you decide to make an appointment later,\n            I'm here to help.\n    {% endif %}\n")),(0,a.kt)("p",null,"In the handler's response, the bot acknowledges cancelation and uses ",(0,a.kt)("inlineCode",{parentName:"p"},"response")," control command to skip the prompts for all remaining empty slots and go directly to the node-level response."),(0,a.kt)("p",null,"In the node-level response, the bot checks for all slot variables. If the all of them is filled, then it displays the standard summary message for the node. If not, it just shows a final message."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"...\n\ud83e\uddd1 Forget it. I changed my mind.\n\ud83e\udd16 Ok, we'll stop there. No appointment will be scheduled.\n\ud83e\udd16 If you decide to make an appointment later, I'm here to help.\n")),(0,a.kt)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,a.kt)("h3",{id:"conditional-slots"},"Conditional Slots"),(0,a.kt)("p",null,"If you want a slot to be enabled only under certain conditions, then you can add a ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," field to it."),(0,a.kt)("p",null,"For example, if slot 1 asks for a meeting start time, slot 2 captures the meeting duration, and slot 3 captures the end time, then you might want to enable slot 3 (and ask for the meeting end time) only if a value for slot 2 is not provided."),(0,a.kt)("p",null,"TODO: need full example"),(0,a.kt)("p",null,"You can condition on the value of a slot variable from an earlier slot because the order in which the slots are listed is the order in which they are evaluated. However, only condition on a slot variable that you can be confident will contain a value when this slot is evaluated. The earlier slot must be a required slot, for example."),(0,a.kt)("h3",{id:"lifespan-of-slot-variables"},"Lifespan of slot variables"),(0,a.kt)("p",null,"The bot stores collected information into slot variables. The information is then used in the node-level response to address user goal."),(0,a.kt)("p",null,"After the node-level response is completed, and the bot ",(0,a.kt)("a",{parentName:"p",href:"/design-guides/state#slots-lifespan"},"does not take any further action"),", the slot values are cleared so that the node can start collecting information again. This is due to the fact that a node with slots only prompts users for information that it considers missing. ",(0,a.kt)("em",{parentName:"p"},"If a slot variable is filled with valid value, prompt is not displayed.")),(0,a.kt)("p",null,"Do not reuse a slot variable that is used elsewhere in the dialog. If the slot variable has a value already, then the slot's prompt is not displayed."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/design-guides/state"},"Dialog State")," guide for more information."),(0,a.kt)("h3",{id:"avoiding-slot-filling-confusion"},"Avoiding slot filling confusion"),(0,a.kt)("p",null,"When a user input is evaluated, the slot with the first slot ",(0,a.kt)("inlineCode",{parentName:"p"},"check_for")," condition to match it is filled only. Test for the following possible causes of misinterpretation, and address them."),(0,a.kt)("h4",{id:"the-same-entity-is-used-in-more-than-one-slot"},"The same entity is used in more than one slot"),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.date")," is used to capture the departure date in one slot and arrival date in another."),(0,a.kt)("p",null,"Use slot found conditions that get clarification from the user about which date you are saving in a slot before you save it."),(0,a.kt)("h4",{id:"a-term-fully-or-partially-matches-the-entities-in-more-than-one-slot"},"A term fully or partially matches the entities in more than one slot"),(0,a.kt)("p",null,"For example, if one slot captures a product ID (",(0,a.kt)("inlineCode",{parentName:"p"},"entities.product_id"),') with a syntax like "GR1234" and another slot captures a number (',(0,a.kt)("inlineCode",{parentName:"p"},"entities.number"),"), such as 1234, then user input that contains an ID, such as BR3344 might get claimed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.number")," slot as a number reference and fill the ",(0,a.kt)("inlineCode",{parentName:"p"},"slots.number")," variable with 3344."),(0,a.kt)("p",null,"Place the slot with the entity condition that captures the longer pattern (",(0,a.kt)("inlineCode",{parentName:"p"},"entities.id"),") higher in the list of slots than the condition that captures the shorter pattern (",(0,a.kt)("inlineCode",{parentName:"p"},"entities.number"),")."),(0,a.kt)("h4",{id:"a-term-is-recognized-as-more-than-one-builtin-entity-type"},"A term is recognized as more than one builtin entity type"),(0,a.kt)("p",null,'For example, if the user enters "May 2", then your bot recognizes both the ',(0,a.kt)("inlineCode",{parentName:"p"},"entities.date")," (2022-05-02) and ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.number")," (2)."),(0,a.kt)("p",null,"In logic that is unique to the slots feature, when two system entities are recognized in a single user input, the one with the larger span is used. Therefore, even though your bot recognizes both system entities in the text, only the system entity with the longer span (",(0,a.kt)("inlineCode",{parentName:"p"},"entities.date")," with 2017-05-02) is registered and applied to the slot."),(0,a.kt)("p",null,"Note, that the maxbot builtin nlu consider date reference to be an ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.date")," mention only, and is not also treated as an ",(0,a.kt)("inlineCode",{parentName:"p"},"entities.number")," mention. For more details, see ",(0,a.kt)("a",{parentName:"p",href:"/design-reference/context"},"Context")," reference."),(0,a.kt)("h3",{id:"flow"},"Slot filling flow"),(0,a.kt)("p",null,"Let's take an overall look to the slot filling flow. When a user input is received, the conditions and responses are evaluated in the following order."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check_for")," expressions are evaluated for all slots and slot variables are filled with the captured values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"found")," responses are processed for each filled slot."),(0,a.kt)("li",{parentName:"ul"},"If none of the slots are filled, the next one is processed sequentially until something succeeds.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"slot_handlers")," in the order they are listed."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"/design-guides/digressions"},"digression")," into the root level dialog nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"not_found")," response of previously prompted slot."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prompt")," response of the first empty slot is processed.")))}u.isMDXComponent=!0}}]);