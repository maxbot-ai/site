"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[243],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,b=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?o.createElement(b,r(r({ref:n},u),{},{components:t})):o.createElement(b,r({ref:n},u))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2651:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const i={},r="Extensions",s={unversionedId:"coding-guides/extensions",id:"coding-guides/extensions",title:"Extensions",description:"Extensions are extra packages that add functionality to a maxbot application. For example, an extension might add support for new channel, custom state tracker or sending some special types of messages.",source:"@site/docs/coding-guides/extensions.md",sourceDirName:"coding-guides",slug:"/coding-guides/extensions",permalink:"/coding-guides/extensions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Channels",permalink:"/coding-guides/channels"},next:{title:"Packaging Guide",permalink:"/coding-guides/packaging"}},l={},p=[{value:"Using Extensions",id:"using-extensions",level:2},{value:"Installing",id:"installing",level:3},{value:"Declaring in bot.yaml",id:"declaring-in-botyaml",level:3},{value:"Applying in source code",id:"applying-in-source-code",level:3},{value:"Developing Extensions",id:"developing-extensions",level:2},{value:"Naming",id:"naming",level:3},{value:"Customizing Bots",id:"customizing-bots",level:3},{value:"Configuring",id:"configuring",level:3},{value:"Discovering",id:"discovering",level:3},{value:"In-project Extensions",id:"in-project-extensions",level:3}],u={toc:p};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"extensions"},"Extensions"),(0,a.kt)("p",null,"Extensions are extra packages that add functionality to a ",(0,a.kt)("strong",{parentName:"p"},"maxbot")," application. For example, an extension might add support for new channel, custom state tracker or sending some special types of messages."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"maxbot"),' extensions are usually named "maxbot-foo". You can search PyPI for packages tagged with ',(0,a.kt)("a",{parentName:"p",href:"https://pypi.org/search/?c=Framework+%3A%3A+MaxBot"},"Framework :: MaxBot"),"."),(0,a.kt)("h2",{id:"using-extensions"},"Using Extensions"),(0,a.kt)("p",null,"Consult each extension\u2019s documentation for installation, configuration, and usage instructions."),(0,a.kt)("h3",{id:"installing"},"Installing"),(0,a.kt)("p",null,"First, you need to install the extension"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ pip install maxbot-foo\n")),(0,a.kt)("p",null,"If you are developing the ",(0,a.kt)("strong",{parentName:"p"},"maxbot")," project you need to add the extension package as a project dependency."),(0,a.kt)("p",null,"Next, there are two ways to add the extension to your bot. You can simply declare the required extensinos in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml"),". If you need more control you can apply extensinos in the source code."),(0,a.kt)("h3",{id:"declaring-in-botyaml"},"Declaring in bot.yaml"),(0,a.kt)("p",null,"An extension can be declared in the ",(0,a.kt)("inlineCode",{parentName:"p"},"extensions")," section of your ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"extensions:\n    foo: {}\n")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," is the name of the extension and value ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," is the extension configuration dictionary. In our case configuration is empty. Generally, each extension has it's own configuration schema described in the extension's documentation. For example, an extension that installs a custom sql state_tracker for a bot could be configured as follows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'extensinos:\n    my-state-tracker:\n        dsn: "mssql+pyodbc://user:password@DSNSTRING"\n')),(0,a.kt)("p",null,"No programming skills are required to add extensions this way."),(0,a.kt)("p",null,"TODO: Need an example based on real life extension."),(0,a.kt)("h3",{id:"applying-in-source-code"},"Applying in source code"),(0,a.kt)("p",null,"If you are programmatically customizing your bot with a builder pattern note that the extensions declared in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," are loaded when your call the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," method after all the customizations have been done. To apply your customizations to a loaded extension you must first load the extension manualy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from maxbot_foo import foo_extension\nfrom maxbot import MaxBot\n\nbuilder = MaxBot.builder()\n\n# manualy load an extension\nfoo_extension(builder, config={})\n\n# here you can customize your bot\n\n# provide a way to load resources\nbuilder.use_file_resources('bot.yaml')\n\n# actually loads extensinos declared in the bot.yaml\nbot = builder.build()\n")),(0,a.kt)("p",null,"You do not need to declare extension in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," if you are loading it manually."),(0,a.kt)("p",null,"TODO: Do we need to configure such extensions in bot.yaml?"),(0,a.kt)("h2",{id:"developing-extensions"},"Developing Extensions"),(0,a.kt)("p",null,"This section will show how to create ",(0,a.kt)("strong",{parentName:"p"},"maxbot")," extensions."),(0,a.kt)("h3",{id:"naming"},"Naming"),(0,a.kt)("p",null,"We give extensions string names so they can be declared in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml"),". Most of declarations in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," must be valid Python identifiers. For consistency, extension names follow the same requirement."),(0,a.kt)("p",null,"Typically, the extension name is prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"maxbot")," to make it a unique Python package name. A general Python packaging recommendation is that the install name from the package index and the name used in ",(0,a.kt)("inlineCode",{parentName:"p"},"import")," statement should be related.  The import name is lowercase, with words separated by underscores (_). The install name is lower case case, with words separated by dashes (-)."),(0,a.kt)("p",null,"For example, extension named ",(0,a.kt)("inlineCode",{parentName:"p"},"foo_bar")," installed as ",(0,a.kt)("inlineCode",{parentName:"p"},"maxbot-foo-bar")," and imported as ",(0,a.kt)("inlineCode",{parentName:"p"},"maxbot_foo_bar"),"."),(0,a.kt)("h3",{id:"customizing-bots"},"Customizing Bots"),(0,a.kt)("p",null,"An extension is nothing more then a Python callable with two arguments: a bot builder and an optional configuration dictionary. Given these arguments an extension should customize a bot builder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def foo_bar_extension(builder, config):\n    builder.before_turn(...)\n    ...\n")),(0,a.kt)("p",null,"There are many ways that an extension can customize the builder. Any methods that are available on a bot builder can be used during an extension\u2019s call. See ",(0,a.kt)("a",{parentName:"p",href:"/coding-guides/bots"},"Bots")," guide to learn how to customize a bot."),(0,a.kt)("p",null,"It is important that the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder")," instance is not stored on the extension and the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder")," methods should not be called after the extension callable is complete."),(0,a.kt)("h3",{id:"configuring"},"Configuring"),(0,a.kt)("p",null,"TODO: Not implemented yet. Needs to be refactored in that way."),(0,a.kt)("p",null,"The second argument to the extension callable is an optional configuration dictionay. If you want to pass a non-empty configuration when declaring an extension in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml"),", you must specify a schema for that configuration. The configuration dictionary schema is specified using the ",(0,a.kt)("inlineCode",{parentName:"p"},"maxbot_extension")," annotation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from marshmallow import Schema, fields\nfrom maxbot import maxbot_extension\n\nclass ForBarConfig(Schema):\n    some_str = fields.String(required=True)\n    some_number = fields.Integer()\n\n@maxbot_extension(config_schema=ForBarConfig)\ndef foo_bar_extension(builder, config):\n    builder.before_turn(...)\n")),(0,a.kt)("p",null,"Then the extension can be configuraed in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," as follows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"extensions:\n    foo_bar:\n        some_str: !ENV some value with ${SOME_VARIABLE}\n        some_number: 123\n")),(0,a.kt)("p",null,"You can also use variable substitution (TODO: link) to pass environment variables to the extension's configuration."),(0,a.kt)("p",null,"A schema specification is not required when you apply an extension in source code."),(0,a.kt)("h3",{id:"discovering"},"Discovering"),(0,a.kt)("p",null,"To be available for declaration in ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml"),", an extension must be specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"maxbot_extensions")," ",(0,a.kt)("a",{parentName:"p",href:"https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/#using-package-metadata"},"entry point"),". ",(0,a.kt)("strong",{parentName:"p"},"maxbot")," will automatically discover such extensions. Entry points are specified in setup.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from setuptools import setup\n\nsetup(\n    name='maxbot-foo-bar',\n    ...,\n    entry_points={\n        'maxbot_extensions': [\n            'foo_bar=maxbot_foo_bar:foo_bar_extension'\n        ],\n    },\n)\n")),(0,a.kt)("p",null,"or pyproject.toml if you are using for example the ",(0,a.kt)("a",{parentName:"p",href:"https://python-poetry.org"},"poetry")," tool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[tool.poetry.plugins.maxbot_extensions]\nfoo_bar = "maxbot_foo_bar:foo_bar_extension"\n')),(0,a.kt)("p",null,"For other packaging tools refer to their documentation for support of defining entry points."),(0,a.kt)("h3",{id:"in-project-extensions"},"In-project Extensions"),(0,a.kt)("p",null,"Let's say you have developed an in-project extension in your ",(0,a.kt)("strong",{parentName:"p"},"maxbot")," project and want to make it available for declaring in the ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," file. To do this, pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"available_extensions")," argument to the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder")," factory as follows."),(0,a.kt)("p",null,"TODO: Why is it an argument and not a separate builder method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from maxbot import MaxBot\n\nfrom .bar import bar_extension\n\nbuilder = MaxBot.builder(available_extensions={\n    'bar': bar_extension\n})\n# ...\nbuilder.use_file_resources('bot.yaml')\nbot = builder.build()\n")),(0,a.kt)("p",null,"Then the extension can be declared in the ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.yaml")," file as usual."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"extensions:\n    bar: {}\n")),(0,a.kt)("p",null,"In this case it will be loaded when your call the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," method."))}d.isMDXComponent=!0}}]);