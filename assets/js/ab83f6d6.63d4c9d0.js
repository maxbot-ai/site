"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[782],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},h=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,u=d["".concat(o,".").concat(m)]||d[m]||c[m]||s;return r?a.createElement(u,i(i({ref:t},h),{},{components:r})):a.createElement(u,i({ref:t},h))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<s;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9068:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const s={},i="Strings",l={unversionedId:"design-reference/strings",id:"design-reference/strings",title:"Strings",description:"Strings are sequences of unicode characters. Their methods and filters help you work with text. String-specific operators, tests, filters, and methods are described below. Since strings are also sequences, you can apply any sequence operators, tests, and filters to strings. We duplicate the most important of them on this page.",source:"@site/docs/design-reference/strings.md",sourceDirName:"design-reference",slug:"/design-reference/strings",permalink:"/design-reference/strings",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Jinja Syntax",permalink:"/design-reference/jinja"},next:{title:"Booleans",permalink:"/design-reference/booleans"}},o={},p=[{value:"Literals",id:"literals",level:2},{value:"&quot;Hello World&quot;",id:"new-string",level:3},{value:"Constructors",id:"constructors",level:2},{value:"<code>any|string</code>",id:"filter-string",level:3},{value:"Operators",id:"operators",level:2},{value:"<code>string[start:stop]</code>",id:"operator-slice",level:3},{value:"<code>string % x</code>",id:"operator-modulo",level:3},{value:"<code>x in string</code>",id:"operator-in",level:3},{value:"<code>x not in string</code>",id:"operator-not-in",level:3},{value:"<code>string1 ~ string2</code>",id:"operator-concatenate",level:3},{value:"<code>string * number</code>",id:"operator-multiply",level:3},{value:"Tests",id:"tests",level:2},{value:"<code>x is in string</code>",id:"test-in",level:3},{value:"<code>x is lower</code>",id:"test-lower",level:3},{value:"<code>x is string</code>",id:"test-string",level:3},{value:"<code>x is upper</code>",id:"test-upper",level:3},{value:"Filters",id:"filters",level:2},{value:"<code>str|capitalize</code>",id:"filter-capitalize",level:3},{value:"<code>str|format</code>",id:"filter-format",level:3},{value:"<code>str|indent</code>",id:"filter-indent",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>str|length</code>",id:"filter-length",level:3},{value:"<code>str|lower</code>",id:"filter-lower",level:3},{value:"<code>str|replace</code>",id:"filter-replace",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>str|title</code>",id:"filter-title",level:3},{value:"<code>str|trim</code>",id:"filter-trim",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>str|truncate</code>",id:"filter-truncate",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Examples",id:"examples-2",level:4},{value:"<code>str|upper</code>",id:"filter-upper",level:3},{value:"<code>str|wordcount</code>",id:"filter-wordcount",level:3},{value:"Methods",id:"methods",level:2},{value:"Methods: Replace",id:"methods-replacing",level:2},{value:"<code>str.replace(old, new)</code>",id:"method-replace",level:3},{value:"Methods: Prefixes, Suffixes",id:"methods-prefixes-and-suffixes",level:2},{value:"<code>str.startswith(prefix)</code>",id:"method-startswith",level:3},{value:"<code>str.endswith(suffix, ...)</code>",id:"method-endswith",level:3},{value:"<code>str.removeprefix(prefix)</code>",id:"method-removeprefix",level:3},{value:"<code>str.removesuffix(suffix)</code>",id:"method-removesuffix",level:3},{value:"Methods: Strip",id:"methods-stripping",level:2},{value:"<code>str.strip([chars], ...)</code>",id:"method-strip",level:3},{value:"<code>str.lstrip([chars])</code>",id:"method-lstrip",level:3},{value:"<code>str.rstrip([chars])</code>",id:"method-rstrip",level:3},{value:"Methods: Split",id:"methods-splitting",level:2},{value:"<code>str.partition(sep)</code>",id:"method-partition",level:3},{value:"<code>str.rpartition(sep)</code>",id:"method-rpartition",level:3},{value:"<code>str.rsplit(sep)</code>",id:"method-rsplit",level:3},{value:"<code>str.split(sep, ...)</code>",id:"method-split",level:3},{value:"<code>str.splitlines(...)</code>",id:"method-splitlines",level:3},{value:"Methods: Format",id:"methods-formatting",level:2},{value:"<code>str.format(...)</code>",id:"method-format",level:3},{value:"<code>str.join(iterable)</code>",id:"method-join",level:3},{value:"<code>str.center(width, ...)</code>",id:"method-center",level:3},{value:"<code>str.expandtabs(...)</code>",id:"method-expandtabs",level:3},{value:"<code>str.ljust(width)</code>",id:"method-ljust",level:3},{value:"<code>str.rjust(width)</code>",id:"method-rjust",level:3},{value:"<code>str.zfill(width)</code>",id:"method-zfill",level:3},{value:"Methods: Character Case",id:"methods-character-case",level:2},{value:"<code>str.capitalize()</code>",id:"method-capitalize",level:3},{value:"<code>str.casefold()</code>",id:"method-casefold",level:3},{value:"<code>str.upper()</code>",id:"method-upper",level:3},{value:"<code>str.lower()</code>",id:"method-lower",level:3},{value:"<code>str.title()</code>",id:"method-title",level:3},{value:"<code>str.swapcase()</code>",id:"method-swapcase",level:3},{value:"Methods: Predicates",id:"methods-predicates",level:2},{value:"<code>str.isalnum()</code>",id:"method-isalnum",level:3},{value:"<code>str.isalpha()</code>",id:"method-isalpha",level:3},{value:"<code>str.isascii()</code>",id:"method-isascii",level:3},{value:"<code>str.isdecimal()</code>",id:"method-isdecimal",level:3},{value:"<code>str.isdigit()</code>",id:"method-isdigit",level:3},{value:"<code>str.islower()</code>",id:"method-islower",level:3},{value:"<code>str.isnumeric()</code>",id:"method-isnumeric",level:3},{value:"<code>str.isprintable()</code>",id:"method-isprintable",level:3},{value:"<code>str.isspace()</code>",id:"method-isspace",level:3},{value:"<code>str.istitle()</code>",id:"method-istitle",level:3},{value:"<code>str.isupper()</code>",id:"method-isupper",level:3},{value:"Methods: Substrings",id:"methods-substrings",level:2},{value:"<code>str.find(sub, ...)</code>",id:"method-find",level:3},{value:"<code>str.index(sub, ...)</code>",id:"method-index",level:3},{value:"<code>str.rfind(sub, ...)</code>",id:"method-rfind",level:3},{value:"<code>str.rindex(sub, ...)</code>",id:"method-rindex",level:3},{value:"<code>str.count(sub, ...)</code>",id:"method-count",level:3}],h={toc:p};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"strings"},"Strings"),(0,n.kt)("p",null,"Strings are sequences of unicode characters. Their methods and filters help you work with text. String-specific operators, tests, filters, and methods are described below. Since strings are also ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#lists-tuples-and-more"},"sequences"),", you can apply any sequence ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#operators"},"operators"),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#tests"},"tests"),", and ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filters"},"filters")," to strings. We duplicate the most important of them on this page."),(0,n.kt)("h2",{id:"literals"},"Literals"),(0,n.kt)("h3",{id:"new-string"},'"Hello World"'),(0,n.kt)("p",null,"String literals are surrounded by either single quotation marks, or double quotation marks."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{ \"hello\" }}\n-> hello\n\n{{ 'hello' }}\n-> hello\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#literals"},"Jinja Docs"),"."),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"filter-string"},(0,n.kt)("inlineCode",{parentName:"h3"},"any|string")),(0,n.kt)("p",null,"Convert an object to a string if it isn\u2019t already."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{ true|string|upper }}\n-> TRUE\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.string"},"Jinja Docs"),"."),(0,n.kt)("h2",{id:"operators"},"Operators"),(0,n.kt)("h3",{id:"operator-slice"},(0,n.kt)("inlineCode",{parentName:"h3"},"string[start:stop]")),(0,n.kt)("p",null,"Gets a substring with the character at ",(0,n.kt)("em",{parentName:"p"},"start")," and the last character set to index before ",(0,n.kt)("em",{parentName:"p"},"stop"),". Indexes ",(0,n.kt)("em",{parentName:"p"},"start")," and ",(0,n.kt)("em",{parentName:"p"},"stop")," can be omitted which means that the result includes characters from the beginning or end of the string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "This is a text." %}\n\n{{ input[5:15] }}\n-> "is a"\n\n{{ input[5:] }}\n-> "is a text."\n\n{{ input[:15] }}\n-> "This is a"\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#typesseq-common"},"Python Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/python-slice-string"},"In-depth Tutorial on DigitalOcean"),"."),(0,n.kt)("h3",{id:"operator-modulo"},(0,n.kt)("inlineCode",{parentName:"h3"},"string % x")),(0,n.kt)("p",null,"Given ",(0,n.kt)("inlineCode",{parentName:"p"},"string % x"),", instances of ",(0,n.kt)("inlineCode",{parentName:"p"},"%")," in string are replaced with zero or more elements of values. This operation is commonly known as string interpolation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set greeting = "Hello" %}\n{% set name = "John" %}\n\n{{ "%s, %s!" % (greeting, name) }}\n-> Hello, John!\n')),(0,n.kt)("p",null,"In most cases it should be more convenient and efficient to use the  ",(0,n.kt)("a",{parentName:"p",href:"#method-format"},(0,n.kt)("inlineCode",{parentName:"a"},"str.format()")),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "{}, {}!".format(greeting, name) }}\n-> Hello, John!\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/tutorial/inputoutput.html#old-string-formatting"},"Python Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#old-string-formatting"},"printf-style String Formatting"),", ",(0,n.kt)("a",{parentName:"p",href:"#filter-format"},(0,n.kt)("inlineCode",{parentName:"a"},"str|format")),", ",(0,n.kt)("a",{parentName:"p",href:"#method-format"},(0,n.kt)("inlineCode",{parentName:"a"},"str.format()")),"."),(0,n.kt)("h3",{id:"operator-in"},(0,n.kt)("inlineCode",{parentName:"h3"},"x in string")),(0,n.kt)("p",null,"Return true if the right string contains the left substring."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "I said yes!" %}\n\n{{ "yes" in input }}\n-> true # because the input string contains substring "yes"\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#other-operators"},"Jinja Docs"),"."),(0,n.kt)("h3",{id:"operator-not-in"},(0,n.kt)("inlineCode",{parentName:"h3"},"x not in string")),(0,n.kt)("p",null,"Return true if the right string does not contain the left substring."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "I said no!" %}\n\n{{ "yes" in input }}\n-> false # because the input string does not contain substring "yes"\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#logic"},"Jinja Docs"),"."),(0,n.kt)("h3",{id:"operator-concatenate"},(0,n.kt)("inlineCode",{parentName:"h3"},"string1 ~ string2")),(0,n.kt)("p",null,"Converts all operands into strings and concatenates them."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set name = "John" %}\n\n{{ "Hello " ~ name ~ "!" }}\n-> Hello John!\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#other-operators"},"Jinja Docs"),"."),(0,n.kt)("h3",{id:"operator-multiply"},(0,n.kt)("inlineCode",{parentName:"h3"},"string * number")),(0,n.kt)("p",null,"Repeat a string multiple times."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "=" * 8 }}\n-> ========\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#math"},"Jinja Docs"),"."),(0,n.kt)("h2",{id:"tests"},"Tests"),(0,n.kt)("h3",{id:"test-in"},(0,n.kt)("inlineCode",{parentName:"h3"},"x is in string")),(0,n.kt)("p",null,"Check if ",(0,n.kt)("em",{parentName:"p"},"x")," is in ",(0,n.kt)("em",{parentName:"p"},"string"),". Typicallty you need to use operator ",(0,n.kt)("a",{parentName:"p",href:"#operator-in"},(0,n.kt)("inlineCode",{parentName:"a"},"x in string"))," instead of a test. Use a test when you need filter a list of possible substrings."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "I said yes!" %}\n\n{{ "yes" is in input }}\n-> true\n\n{{ ["yes", "yep", "ok"]|select("in", input)|list }}\n-> ["yes"]\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.in"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#operator-in"},(0,n.kt)("inlineCode",{parentName:"a"},"x in string")),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-select"},(0,n.kt)("inlineCode",{parentName:"a"},"list|select")),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,n.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,n.kt)("h3",{id:"test-lower"},(0,n.kt)("inlineCode",{parentName:"h3"},"x is lower")),(0,n.kt)("p",null,"Return true if ",(0,n.kt)("em",{parentName:"p"},"x")," is lowercased."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "onion" is lower }}\n-> true\n\n{{ ["onion", "olives", "HAM"]|select("lower")|list }}\n-> ["onion", "olives"]\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.lower"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-select"},(0,n.kt)("inlineCode",{parentName:"a"},"list|select")),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,n.kt)("inlineCode",{parentName:"a"},"iterable|list")),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h3",{id:"test-string"},(0,n.kt)("inlineCode",{parentName:"h3"},"x is string")),(0,n.kt)("p",null,"Return true if ",(0,n.kt)("em",{parentName:"p"},"x")," is a string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "hello world" is string }}\n-> true\n\n{{ [true, "hello world", 12]|select("string")|list }}\n-> ["hello world"]\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.string"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-select"},(0,n.kt)("inlineCode",{parentName:"a"},"list|select")),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,n.kt)("inlineCode",{parentName:"a"},"iterable|list")),"."),(0,n.kt)("h3",{id:"test-upper"},(0,n.kt)("inlineCode",{parentName:"h3"},"x is upper")),(0,n.kt)("p",null,"Return true if ",(0,n.kt)("em",{parentName:"p"},"x")," is uppercased."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "HAM" is upper }}\n-> true\n\n{{ ["onion", "olives", "HAM"]|select("lower")|list }}\n-> ["onion", "olives"]\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.upper"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-select"},(0,n.kt)("inlineCode",{parentName:"a"},"list|select")),", ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-list"},(0,n.kt)("inlineCode",{parentName:"a"},"iterable|list")),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h2",{id:"filters"},"Filters"),(0,n.kt)("h3",{id:"filter-capitalize"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|capitalize")),(0,n.kt)("p",null,"Capitalize a value. The first character will be uppercase, all others lowercase."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% input = "hello world!" %}\n\n{{ input|capitalize }}\n-> Hello world!\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.capitalize"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h3",{id:"filter-format"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|format")),(0,n.kt)("p",null,"Apply the given values to a ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/library/stdtypes.html#printf-style-string-formatting"},"printf-style")," format string, like string % values."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "%s, %s!"|format(greeting, name) }}\nHello, World!\n')),(0,n.kt)("p",null,"In most cases it should be more convenient and efficient to use the  ",(0,n.kt)("a",{parentName:"p",href:"#method-format"},(0,n.kt)("inlineCode",{parentName:"a"},"str.format()")),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "{}, {}!".format(greeting, name) }}\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.format"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#operator-modulo"},(0,n.kt)("inlineCode",{parentName:"a"},"string % x")),",  ",(0,n.kt)("a",{parentName:"p",href:"#methods-formatting"},"Methods: Formatting"),"."),(0,n.kt)("h3",{id:"filter-indent"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|indent")),(0,n.kt)("p",null,"Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"width")," \u2013 Number of spaces, or a string, to indent by."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"first")," \u2013 Don\u2019t skip indenting the first line."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"blank")," \u2013 Don\u2019t skip indenting empty lines.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.indent"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-formatting"},"Methods: Formatting"),"."),(0,n.kt)("h3",{id:"filter-length"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|length")),(0,n.kt)("p",null,"Return the number of characters in a string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "Hello" %}\n\n{{ input|length }}\n-> 5\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.length"},"Jinja Docs"),"."),(0,n.kt)("h3",{id:"filter-lower"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|lower")),(0,n.kt)("p",null,"Convert a string to a lowercase."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "This is A DOG!" %}\n\n{{ input|lower }}\n-> this is a dog!\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.lower"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h3",{id:"filter-replace"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|replace")),(0,n.kt)("p",null,"Return a copy of the value with all occurrences of a substring replaced with a new one."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"old*")," - The substring that should be replaced."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"new*"),"- The replacement string."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"count")," - If givven, only the first ",(0,n.kt)("em",{parentName:"li"},"count")," occurrences are replaced.")),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "Hello World"|replace("Hello", "Goodbye") }}\n-> Goodbye World\n\n{{ "aaaaargh"|replace("a", "d\'oh, ", 2) }}\n-> d\'oh, d\'oh, aaargh\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.replcae"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-replacing"},"Methods: Replacing"),"."),(0,n.kt)("h3",{id:"filter-title"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|title")),(0,n.kt)("p",null,"Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.title"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h3",{id:"filter-trim"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|trim")),(0,n.kt)("p",null,"Strip leading and trailing characters, by default whitespace."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"chars")," - A string containing characters to strip.")),(0,n.kt)("h4",{id:"examples-1"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "   something is here    " %}\n\nResult: "{{ input|trim }}".\n-> Result: "something is here".\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.trim"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-stripping"},"Methods: Stripping"),"."),(0,n.kt)("h3",{id:"filter-truncate"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|truncate")),(0,n.kt)("p",null,"Return a truncated copy of the string."),(0,n.kt)("p",null,"Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"length")," - The maximum length of the string to keep on (default=255)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"killwords")," - If true, the cut the text at length, otherwise discard the last word (default=false)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"end"),' - A string to append if the text is in fact truncated (default="...").'),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"leeway ")," - Strings that only exceed the length by the tolerance margin given will not be truncated (default=5).")),(0,n.kt)("h4",{id:"examples-2"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "foo bar baz qux"|truncate(9) }}\n-> "foo..."\n\n{{ "foo bar baz qux"|truncate(9, true) }}\n-> "foo ba..."\n\n{{ "foo bar baz qux"|truncate(11) }}\n-> "foo bar baz qux"\n\n{{ "foo bar baz qux"|truncate(11, false, \'...\', 0) }}\n-> "foo bar..."\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.truncate"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-formatting"},"Methods: Formatting"),"."),(0,n.kt)("h3",{id:"filter-upper"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|upper")),(0,n.kt)("p",null,"Convert a string to uppercase."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "hi there" %}\n\n{{ input|upper }}\n-> HI THERE\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.upper"},"Jinja Docs"),", ",(0,n.kt)("a",{parentName:"p",href:"#methods-character-case"},"Methods: Character Case"),"."),(0,n.kt)("h3",{id:"filter-wordcount"},(0,n.kt)("inlineCode",{parentName:"h3"},"str|wordcount")),(0,n.kt)("p",null,"Count the words in that string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% input = "Hello, world! %}\n\n{{ input|wordcount }}\n-> 2\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.wordcount"},"Jinja Docs"),"."),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h2",{id:"methods-replacing"},"Methods: Replace"),(0,n.kt)("h3",{id:"method-replace"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.replace(old, new)")),(0,n.kt)("p",null,"Return a copy of the string with all occurrences of substring old replaced by new. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.replace"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-prefixes-and-suffixes"},"Methods: Prefixes, Suffixes"),(0,n.kt)("h3",{id:"method-startswith"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.startswith(prefix)")),(0,n.kt)("p",null,"Return true if string starts with the prefix, otherwise return false."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "What is your name?" %}\n\n{{ input.startswith("What") }}\n-> true\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.startswith"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-endswith"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.endswith(suffix, ...)")),(0,n.kt)("p",null,"Return true if the string ends with the specified suffix, otherwise return false."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{% set input = "What is your name?" %}\n\n{{ input.endswith("?") }}\n-> true\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.endswith"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-removeprefix"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.removeprefix(prefix)")),(0,n.kt)("p",null,"Return a copy of the string without the prefix. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.removeprefix"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-removesuffix"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.removesuffix(suffix)")),(0,n.kt)("p",null,"Return a copy of the string without the suffix. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.removesuffix"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-stripping"},"Methods: Strip"),(0,n.kt)("h3",{id:"method-strip"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.strip([chars], ...)")),(0,n.kt)("p",null,"Return a copy of the string with the leading and trailing characters removed. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.strip"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-lstrip"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.lstrip([chars])")),(0,n.kt)("p",null,"Return a copy of the string with leading characters removed. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.lstrip"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rstrip"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rstrip([chars])")),(0,n.kt)("p",null,"Return a copy of the string with trailing characters removed. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rstrip"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-splitting"},"Methods: Split"),(0,n.kt)("h3",{id:"method-partition"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.partition(sep)")),(0,n.kt)("p",null,"Split the string at the ",(0,n.kt)("em",{parentName:"p"},"first occurrence")," of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.partition"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rpartition"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rpartition(sep)")),(0,n.kt)("p",null,"Split the string at the ",(0,n.kt)("em",{parentName:"p"},"last occurrence")," of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rpartition"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rsplit"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rsplit(sep)")),(0,n.kt)("p",null,"Return a list of the words in the string, using sep as the delimiter string. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rsplit"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-split"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.split(sep, ...)")),(0,n.kt)("p",null,"Return a list of the words in the string, using sep as the delimiter string. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.split"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-splitlines"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.splitlines(...)")),(0,n.kt)("p",null,"Return a list of the lines in the string, breaking at line boundaries. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.splitlines"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-formatting"},"Methods: Format"),(0,n.kt)("h3",{id:"method-format"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.format(...)")),(0,n.kt)("p",null,"Perform a string formatting operation. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.format"},"Python Docs"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ "The sum of 1 + 2 is {0}".format(1+2) }}\n-> The sum of 1 + 2 is 3\n')),(0,n.kt)("p",null,"See also: ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/string.html#formatstrings"},"Format String Syntax"),", ",(0,n.kt)("a",{parentName:"p",href:"#filter-format"},(0,n.kt)("inlineCode",{parentName:"a"},"str|format")),", ",(0,n.kt)("a",{parentName:"p",href:"#operator-modulo"},(0,n.kt)("inlineCode",{parentName:"a"},"string % x")),"."),(0,n.kt)("h3",{id:"method-join"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.join(iterable)")),(0,n.kt)("p",null,"Return a string which is the concatenation of the strings in iterable. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.join"},"Python Docs"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See also"),": ",(0,n.kt)("a",{parentName:"p",href:"/design-reference/lists#filter-join"},(0,n.kt)("inlineCode",{parentName:"a"},"list|join")),"."),(0,n.kt)("h3",{id:"method-center"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.center(width, ...)")),(0,n.kt)("p",null,"Return centered in a string of length width. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.center"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-expandtabs"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.expandtabs(...)")),(0,n.kt)("p",null,"Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.expandtabs"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-ljust"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.ljust(width)")),(0,n.kt)("p",null,"Return the string left justified in a string of length width. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.ljust"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rjust"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rjust(width)")),(0,n.kt)("p",null,"Return the string right justified in a string of length width. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rjust"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-zfill"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.zfill(width)")),(0,n.kt)("p",null,"Return a copy of the string left filled with ASCII '0' digits to make a string of length width. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.zfill"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-character-case"},"Methods: Character Case"),(0,n.kt)("h3",{id:"method-capitalize"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.capitalize()")),(0,n.kt)("p",null,"Return a copy of the string with its first character capitalized and the rest lowercased. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.capitalize"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-casefold"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.casefold()")),(0,n.kt)("p",null,"Return a casefolded copy of the string. Casefolded strings may be used for caseless matching. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.casefold"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-upper"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.upper()")),(0,n.kt)("p",null,"Return a copy of the string with all the cased characters 4 converted to uppercase. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.upper"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-lower"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.lower()")),(0,n.kt)("p",null,"Return a copy of the string with all the cased characters converted to lowercase. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.lower"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-title"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.title()")),(0,n.kt)("p",null,"Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.title"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-swapcase"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.swapcase()")),(0,n.kt)("p",null,"Return a copy of the string with uppercase characters converted to lowercase and vice versa. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.swapcase"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-predicates"},"Methods: Predicates"),(0,n.kt)("h3",{id:"method-isalnum"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isalnum()")),(0,n.kt)("p",null,"Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isalnum"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isalpha"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isalpha()")),(0,n.kt)("p",null,"Return true if all characters in the string are alphabetic and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isalpha"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isascii"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isascii()")),(0,n.kt)("p",null,"Return true if the string is empty or all characters in the string are ASCII, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isascii"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isdecimal"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isdecimal()")),(0,n.kt)("p",null,"Return true if all characters in the string are decimal characters and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isdecimal"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isdigit"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isdigit()")),(0,n.kt)("p",null,"Return true if all characters in the string are digits and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isdigit"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-islower"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.islower()")),(0,n.kt)("p",null,"Return true if all cased characters in the string are lowercase and there is at least one cased character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.islower"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isnumeric"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isnumeric()")),(0,n.kt)("p",null,"Return true if all characters in the string are numeric characters, and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isnumeric"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isprintable"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isprintable()")),(0,n.kt)("p",null,"Return true if all characters in the string are printable or the string is empty, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isprintable"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isspace"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isspace()")),(0,n.kt)("p",null,"Return true if there are only whitespace characters in the string and there is at least one character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isspace"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-istitle"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.istitle()")),(0,n.kt)("p",null,"Return true if the string is a titlecased string and there is at least one character. Return false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.istitle"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-isupper"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.isupper()")),(0,n.kt)("p",null,"Return true if all cased characters in the string are uppercase and there is at least one cased character, false otherwise. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.isupper"},"Python Docs"),"."),(0,n.kt)("h2",{id:"methods-substrings"},"Methods: Substrings"),(0,n.kt)("h3",{id:"method-find"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.find(sub, ...)")),(0,n.kt)("p",null,"Return the ",(0,n.kt)("em",{parentName:"p"},"lowest index")," in the string where substring ",(0,n.kt)("strong",{parentName:"p"},"sub")," is found. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.find"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-index"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.index(sub, ...)")),(0,n.kt)("p",null,"Like ",(0,n.kt)("a",{parentName:"p",href:"#method-find"},"str.find()"),", but raise an errors when the substring is not found. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.index"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rfind"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rfind(sub, ...)")),(0,n.kt)("p",null,"Return the ",(0,n.kt)("em",{parentName:"p"},"highest index")," in the string where substring ",(0,n.kt)("strong",{parentName:"p"},"sub")," is found. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rfind"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-rindex"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.rindex(sub, ...)")),(0,n.kt)("p",null,"Like ",(0,n.kt)("a",{parentName:"p",href:"#method-rfind"},"str.rfind()"),", but raise an errors when the substring is not found. See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.rindex"},"Python Docs"),"."),(0,n.kt)("h3",{id:"method-count"},(0,n.kt)("inlineCode",{parentName:"h3"},"str.count(sub, ...)")),(0,n.kt)("p",null,"Return the number of non-overlapping occurrences of substring ",(0,n.kt)("em",{parentName:"p"},"sub"),". See ",(0,n.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#str.count"},"Python Docs"),"."))}d.isMDXComponent=!0}}]);